{
    "name": "T1D_Stats_And_Alerts",
    "description": "PubNub function module for handling basic stats and alerting/notification",
    "event_handlers": [
        {
            "name": "Stats",
            "event": "js-before-publish",
            "channels": "cgm.*",
            "file": "js-before-publish/Stats.js",
            "output": "output-0.5823105682419438",
            "code": "/* \n    Augument CGM data stream with useful statistics based on recent records\n*/\n\n\n// require modules\nconst db = require(\"kvstore\");\nconst pubnub = require('pubnub');\n\n// basic stats functions\nlet average = (array) => array.reduce((a, b) => a + b) / array.length;\n\nlet average_diff = (array, start, end) => {\n    var avg = 0;\n        var i;\n    for (i = start+1; i < end + 1; i++) { \n        \n        var diff = array[i] - array[i-1];\n        avg += diff;\n    }\n    return avg/(end-start);\n}\n\n// adding some data to drive EON charts\nlet addEonChartData  = (req) => {\n    req.message.eon = {'bg': req.message.sgv, 'trend':  req.message.trend, 'x': req.message.date};\n\n}\n\n// do some basic stats\nlet addStatsData = (req, last_100_entries_arr) => {\n    var last_100_entries_arr_len = last_100_entries_arr.length;\n    req.message.average = average(last_100_entries_arr);\n    req.message.average_last_5 = average(last_100_entries_arr.slice(last_100_entries_arr_len-6));\n    req.message.avg_last_1_diffs = average_diff(last_100_entries_arr, last_100_entries_arr_len-2, last_100_entries_arr_len-1);\n    req.message.avg_last_3_diffs = average_diff(last_100_entries_arr, last_100_entries_arr_len-4, last_100_entries_arr_len-1);\n    req.message.avg_last_5_diffs = average_diff(last_100_entries_arr, last_100_entries_arr_len-6, last_100_entries_arr_len-1);\n    req.message.avg_last_10_diffs = average_diff(last_100_entries_arr, last_100_entries_arr_len-11, last_100_entries_arr_len-1);\n}\n \n// add locale date time string\nlet addTimeData = (req) => {\n    req.message.localeDateString = new Date(req.message.date).toLocaleString();\n}\n\n// main logic\nexport default (request) => { \n\n    if (request.message.sgv) { // published message contains entry from loop or other CGM based system\n        return db.get(\"last_100_entries\"+request.channels[0]).then((last_100_entries) => {\n            var last_100_entries_new = \"\"; \n            \n            if (!last_100_entries) {\n                last_100_entries = \"\";\n            }\n            \n            var last_100_entries_arr = last_100_entries.split(',').map(Number).filter(Boolean);\n            \n            var last_100_entries_arr_len = last_100_entries_arr.length;\n            if (last_100_entries_arr.length > 14) {\n                var avg_last_5 = average(last_100_entries_arr.slice(last_100_entries_arr_len-6));\n                var avg_last_10 = average(last_100_entries_arr.slice(last_100_entries_arr_len-11));\n            }\n            if (last_100_entries_arr.length == 100) {\n                last_100_entries_arr = last_100_entries_arr.slice(1);\n            }\n            \n            last_100_entries_arr.push(Number(request.message.sgv));\n            \n            db.set(\"last_100_entries\"+request.channels[0], last_100_entries_arr.join());\n\n            addEonChartData(request);\n\n            addStatsData(request, last_100_entries_arr);\n            \n            addTimeData(request);\n            \n            return request.ok(); // Return a promise when you're done         \n        })\n    } else {\n        return request.ok();\n    }\n}",
            "type": "js"
        },
        {
            "name": "Notifications",
            "event": "js-after-publish",
            "channels": "cgm.*",
            "file": "js-after-publish/Notifications.js",
            "output": "output-0.6823105682419438",
            "code": "/* \n    Send BG data to different types of non-PubNub Clients\n    \n    Supported:\n    1. Slack\n    \n    To-do:\n    1. IFTTT\n    2. SMS\n    3. Others?\n*/\n\n\n// require modules\nconst db = require(\"kvstore\");\nconst pubnub = require('pubnub');\nconst vault = require('vault');\nconst xhr = require('xhr');\n\nexport default (request) => {\n    console.log(request);\n    if (request.message.sgv) {\n        return vault.get('SLACK_URL').then((slack_url) => {\n            if (slack_url) {\n                let bg_data = request.message;\n                var message = {\"text\": \"Latest BG reading: *\"+ bg_data.sgv + \"* at \" + bg_data.localeDateString + \". *\" + bg_data.direction +\"* is the direction. The difference from last reading is _\" + Math.floor(bg_data.avg_last_1_diffs) + \"_. The average difference of the last 3 readings is _\" + Math.floor(bg_data.avg_last_3_diffs) + \"_\",\"username\": \"markdownbot\",\"mrkdwn\": true}\n\n                const options = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(message)\n            \n                };\n                \n                // create a HTTP POST request to the slack API\n                return xhr.fetch(slack_url, options).then((r) => {\n                    return request.ok();\n                })\n                .catch((err) => {\n                    console.log(err);\n                    return request.abort();\n                }); \n            } else {\n                return request.ok();   \n            }\n            \n        }).catch((err) => {\n            console.log(err);\n            return request.abort();\n        });\n    } else {\n    \n        return request.ok();\n    }\n    \n};\n\n",
            "type": "js"
        }
    ]
}
